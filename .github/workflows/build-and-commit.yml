name: Build, Commit, and Update README

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            label: Linux
            ext: ""
          - os: windows-latest
            label: Windows
            ext: ".exe"
          - os: macos-latest
            label: macOS
            ext: ".app"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build app
        run: |
          pyinstaller --name "UtillBuddy${{ matrix.ext }}" --onefile --clean --noconfirm utill_buddy.py
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            strip dist/UtillBuddy${{ matrix.ext }} || echo "strip unavailable"
          fi
        shell: bash

      - name: Prepare output directory
          run: |
            if [[ "$RUNNER_OS" == "Windows" ]]; then
            mkdir -p portable/Windows
            cp dist/UtillBuddy.exe portable/Windows/
        else
            mkdir -p portable/${{ matrix.label }}
            cp -f dist/UtillBuddy${{ matrix.ext }} portable/${{ matrix.label }}/
    fi
  shell: bash


      - name: Update README.md
        run: |
          NEW_LINK="ðŸ”¹ [Download for ${{ matrix.label }}](portable/${{ matrix.label }}/UtillBuddy${{ matrix.ext }})"
          awk -v s="<!-- BUILDS START -->" -v e="<!-- BUILDS END -->" -v l="$NEW_LINK" '
            $0 ~ s { print; print l; skip=1; next }
            $0 ~ e { skip=0; print; next }
            skip == 0 { print }
          ' README.md > README.tmp && mv README.tmp README.md
        shell: bash

      - name: Import GPG key and extract ID
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
            KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5)
            echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
          else
            echo "$GPG_PRIVATE_KEY" | gpg --batch --yes --import
            KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5)
            echo "GPG_KEY_ID=$KEY_ID" >> $GITHUB_ENV
          fi
        shell: bash
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: GPG Sign and Push Commit
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global commit.gpgSign true
            git config --global user.signingkey "$GPG_KEY_ID"
            git config --global gpg.program gpg

            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign --output temp.sig --detach-sig README.md

            git pull --rebase --autostash origin main
            git add portable/${{ matrix.label }}/ README.md
            git commit -S -m "Add ${{ matrix.label }} build and update README [auto]" || echo "Nothing to commit"

            for i in 1 2 3; do
              git push origin main && break
              echo "Push failed, retrying ($i)..."
              git pull --rebase --autostash origin main
              sleep 3
            done
          else
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global commit.gpgSign true
            git config --global user.signingkey "$GPG_KEY_ID"
            git config --global gpg.program gpg

            echo "$GPG_PASSPHRASE" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign --output temp.sig --detach-sig README.md

            git pull --rebase --autostash origin main
            git add portable/${{ matrix.label }}/ README.md
            git commit -S -m "Add ${{ matrix.label }} build and update README [auto]" || echo "Nothing to commit"

            for i in 1 2 3; do
              git push origin main && break
              echo "Push failed, retrying ($i)..."
              git pull --rebase --autostash origin main
              sleep 3
            done
          fi
        shell: bash
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ env.GPG_KEY_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
